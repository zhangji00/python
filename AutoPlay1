import socket
import string
from ast import literal_eval 
import time

import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np
import threading

class Tcp_client(object):
	def __init__(self):
		address = ('192.168.1.105', 9999)
		self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.s.connect(address)
		self.s.settimeout(0.1)
		print self.s.recv(512)
    
	def send(self,data):
		self.s.send(data)
		while True:
			try: 
				rec = self.s.recv(512)
	   		except Exception,e:
	   			break
	   		if not rec:
	   			break
	def recv(self):
		self.s.settimeout(1)
		while True:
			try: 
				rec = self.s.recv(512)
	   		except Exception,e:
	   			break
	   		print rec
	   		if not rec:
	   			break

	def sendandrecv(self,data):		
		self.s.send(data)
		str_recv=''
		while True:
			try: 
				rec = self.s.recv(512)
	   		except Exception,e:
	   			break
	   		if not rec:
	   			break
	   		str_recv+=rec
		return str_recv

class Game(object):
	def __init__(self):
		self.nc=Tcp_client()
		self.login(user='test',passwords='test')
		self.mp=self.getmypos()
		self.gp=self.getgamemap()

	def login(self,user='',passwords=''):
		print self.nc.sendandrecv(user)#,'is test'#user name
		print self.nc.sendandrecv(passwords) #,'is test'#password
		print self.nc.sendandrecv('help')

	def getmypos(self):	
		data = self.nc.sendandrecv('map') 
		data = data.split('\r\n')
		pos_info=data[0].split(': ')
		return literal_eval(pos_info[1])

	def getgamemap(self):
		data = self.nc.sendandrecv('map')#s.recv(512)
		data =data.split('\r\n')
		gamemap_info=data[1].split(': ')
		return literal_eval(gamemap_info[1])
	
	def play(self):
		print'---------------------------begin---------------------'
		m_i=self.getgamemap()		
		print len(m_i)
		for i in range(0,len(m_i)):
			print 'step: ' ,i
			mypos=self.getmypos()
			self.mp=mypos
			gamemap=self.getgamemap()
			self.gp=gamemap
			print mypos
			print gamemap
			y=mypos[0]-gamemap[0][0]
			print y
			if y>0:
				for n in range(0,y):
					self.nc.send('down\r\n')
					time.sleep(0.1)
					self.mp[0]-=1
					print 'down'
			elif y<0:
				for n in range(0,abs(y)):
					self.nc.send('up\r\n')
					time.sleep(0.1)
					self.mp[0]+=1
					print 'up'
			x=mypos[1]-gamemap[0][1]
			print x
			if x>0:
				for n in range(0,x):
					self.nc.send('left\r\n')
					time.sleep(0.1)
					self.mp[1]-=1
					print 'left'
			elif x<0:
				for n in range(0,abs(x)):
					self.nc.send('rigth\r\n')
					time.sleep(0.1)
					self.mp[1]+=1
					print 'rigth'
			print 'collect'
			print self.nc.sendandrecv('collect\r\n')
			#yield mypos,gamemap
			#time.sleep(0.1)			
		#self.nc.recv()
	def pos(self):
		while True:
			yield self.mp,self.gp

class gamemap():
	def __init__(self):
		self.game=Game()
		self.fig,self.ax=plt.subplots()
		self.stream=self.game.pos()
		self.ani=animation.FuncAnimation(self.fig,self.update, interval=10, 
                                           init_func=self.setup_plot, blit=True)
	
	def update(self,i):#i update time
		data0,data1=self.stream.next()
		data1.append(data0)
		self.scat.set_offsets(data1)
		
		c=np.random.random((1,len(data1)))
		"""
		c=([0.5])
		for i in range(0,len(data1)-1):
			c.append(0.5)  
		"""
		self.scat.set_array(c[0])
		return self.scat,

	def setup_plot(self):
		self.scat = self.ax.scatter(0, 0, animated=True)
		self.ax.axis([0, 10, 0, 10])
		return self.scat,

	def show(self):
		plt.show()

#gm=Game()
#gm.login(user='test',passwords='test')
#gm.play()
if __name__ == '__main__':

	gm=gamemap()
	gm.game.login(user='test',passwords='test')
	t=threading.Thread(target=gm.game.play)
	t.setDaemon(False) 
	t.start()
	gm.show()
	#gm.game.play()
	print 'you see it'
	#s.close()


